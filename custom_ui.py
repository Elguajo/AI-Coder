"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ UI —Å –ø–æ–º–æ—â—å—é Gradio
"""

import gradio as gr
import os
import sys
from pathlib import Path
from enhanced_chatbot import EnhancedCodingChatBot
import config

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è CSS –∏ JavaScript —Ñ–∞–π–ª–æ–≤
ASSETS_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), "assets")
os.makedirs(ASSETS_DIR, exist_ok=True)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É CSS
CSS_FILE = os.path.join(ASSETS_DIR, "custom.css")

# –°–æ–∑–¥–∞–Ω–∏–µ CSS —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def create_custom_css():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ CSS —Å—Ç–∏–ª—è–º–∏"""
    if not os.path.exists(CSS_FILE):
        with open(CSS_FILE, "w", encoding="utf-8") as f:
            f.write("""
/* –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ */
:root {
    --primary-color: #2563eb;
    --secondary-color: #1e40af;
    --background-color: #f8fafc;
    --text-color: #1e293b;
    --border-color: #e2e8f0;
    --success-color: #10b981;
    --error-color: #ef4444;
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    background-color: var(--background-color);
    color: var(--text-color);
}

.gradio-container {
    max-width: 1200px;
    margin: 0 auto;
}

.main-header {
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    color: white;
    padding: 1.5rem;
    border-radius: 0.5rem;
    margin-bottom: 1rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

.footer {
    text-align: center;
    margin-top: 2rem;
    padding: 1rem 0;
    border-top: 1px solid var(--border-color);
    font-size: 0.875rem;
    color: #64748b;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —á–∞—Ç–∞ */
.chatbot-container {
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
}

.user-message {
    background-color: #e9f5ff;
    border-radius: 0.5rem 0.5rem 0 0.5rem;
    padding: 0.75rem 1rem;
    margin: 0.5rem 0;
}

.bot-message {
    background-color: #f1f5f9;
    border-radius: 0.5rem 0.5rem 0.5rem 0;
    padding: 0.75rem 1rem;
    margin: 0.5rem 0;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
button.primary {
    background-color: var(--primary-color) !important;
    color: white !important;
    border: none !important;
    padding: 0.5rem 1rem !important;
    border-radius: 0.375rem !important;
    font-weight: 500 !important;
    cursor: pointer !important;
    transition: background-color 0.2s !important;
}

button.primary:hover {
    background-color: var(--secondary-color) !important;
}

button.secondary {
    background-color: white !important;
    color: var(--primary-color) !important;
    border: 1px solid var(--border-color) !important;
    padding: 0.5rem 1rem !important;
    border-radius: 0.375rem !important;
    font-weight: 500 !important;
    cursor: pointer !important;
    transition: background-color 0.2s !important;
}

button.secondary:hover {
    background-color: #f1f5f9 !important;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ */
.tab-nav {
    border-bottom: 1px solid var(--border-color);
    margin-bottom: 1rem;
}

.tab-nav button {
    padding: 0.75rem 1.5rem !important;
    border: none !important;
    border-bottom: 2px solid transparent !important;
    background-color: transparent !important;
    font-weight: 500 !important;
    color: #64748b !important;
    transition: all 0.2s !important;
}

.tab-nav button.selected {
    color: var(--primary-color) !important;
    border-bottom: 2px solid var(--primary-color) !important;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–¥–∞ */
.code-editor {
    font-family: 'Fira Code', 'Courier New', monospace;
    border-radius: 0.375rem;
    overflow: hidden;
}

.code-editor pre {
    padding: 1rem !important;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π */
.file-result {
    background-color: #f1f5f9;
    border-radius: 0.375rem;
    padding: 0.75rem 1rem;
    font-family: 'Fira Code', 'Courier New', monospace;
    font-size: 0.875rem;
    white-space: pre-wrap;
}

/* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ */
@media (prefers-color-scheme: dark) {
    :root {
        --background-color: #0f172a;
        --text-color: #e2e8f0;
        --border-color: #334155;
    }
    
    .user-message {
        background-color: #1e3a8a;
        color: white;
    }
    
    .bot-message {
        background-color: #1f2937;
        color: white;
    }
    
    .file-result {
        background-color: #1f2937;
        color: white;
    }
    
    button.secondary {
        background-color: #1f2937 !important;
        color: #e2e8f0 !important;
    }
    
    button.secondary:hover {
        background-color: #334155 !important;
    }
}
""")

def build_custom_interface():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gradio
    –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π
    
    Returns:
        gr.Blocks: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º UI
    """
    # –°–æ–∑–¥–∞–Ω–∏–µ CSS —Ñ–∞–π–ª–∞
    create_custom_css()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞
    bot = EnhancedCodingChatBot()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    with gr.Blocks(css=CSS_FILE, title="–ß–∞—Ç-–±–æ—Ç –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞") as interface:
        # –®–∞–ø–∫–∞
        with gr.Box(elem_classes="main-header"):
            gr.Markdown("# ü§ñ –ß–∞—Ç-–±–æ—Ç –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ DeepSeek")
            gr.Markdown("–õ–æ–∫–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DeepSeek Coder, Ollama –∏ LangChain")
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with gr.Tabs(elem_classes="tab-nav") as tabs:
            
            # –í–∫–ª–∞–¥–∫–∞ —á–∞—Ç–∞
            with gr.TabItem("üí¨ –ß–∞—Ç", id="chat"):
                chatbot = gr.Chatbot(elem_id="chatbot", elem_classes="chatbot-container", height=500)
                
                with gr.Row():
                    msg = gr.Textbox(
                        placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é...",
                        container=False,
                        scale=7
                    )
                    submit = gr.Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", elem_classes="primary", scale=1)
                
                with gr.Row():
                    clear = gr.Button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", elem_classes="secondary")
                    
                with gr.Accordion("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤", open=False):
                    gr.Examples(
                        examples=[
                            "–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ Flask",
                            "–ö–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Å–ª–∏—è–Ω–∏–µ–º –≤ Python?",
                            "–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite",
                            "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ CSV —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é pandas",
                            "–û–±—ä—è—Å–Ω–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∑–∞–º—ã–∫–∞–Ω–∏–π –≤ Python",
                            "/file list"
                        ],
                        inputs=msg
                    )
            
            # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
            with gr.TabItem("üìÅ –§–∞–π–ª—ã", id="files"):
                with gr.Row():
                    with gr.Column(scale=1):
                        gr.Markdown("### üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏")
                        filename_input = gr.Textbox(label="–ò–º—è —Ñ–∞–π–ª–∞")
                        
                        with gr.Row():
                            list_btn = gr.Button("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", elem_classes="secondary")
                            read_btn = gr.Button("–ü—Ä–æ—á–∏—Ç–∞—Ç—å", elem_classes="secondary")
                        
                        file_result = gr.Textbox(
                            label="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏", 
                            lines=10,
                            elem_classes="file-result"
                        )
                    
                    with gr.Column(scale=2):
                        file_content = gr.Code(
                            label="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞", 
                            language="python", 
                            lines=25,
                            elem_classes="code-editor"
                        )
                        save_btn = gr.Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª", elem_classes="primary")
            
            # –í–∫–ª–∞–¥–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–¥–∞
            with gr.TabItem("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–¥–∞", id="execute"):
                with gr.Row():
                    with gr.Column():
                        code_input = gr.Code(
                            label="–ö–æ–¥ Python", 
                            language="python", 
                            lines=15,
                            elem_classes="code-editor"
                        )
                        run_btn = gr.Button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥", elem_classes="primary")
                    
                    with gr.Column():
                        code_output = gr.Textbox(
                            label="–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", 
                            lines=15,
                            elem_classes="file-result"
                        )
            
            # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            with gr.TabItem("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", id="settings"):
                gr.Markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
                
                with gr.Row():
                    with gr.Column():
                        gr.Markdown("#### –ú–æ–¥–µ–ª—å")
                        model_info = gr.Markdown(f"**–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å**: {config.MODEL_NAME}")
                        model_temp = gr.Slider(
                            label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 
                            minimum=0.0, 
                            maximum=1.0, 
                            step=0.1, 
                            value=config.TEMPERATURE
                        )
                        
                        def update_temp(temp):
                            config.TEMPERATURE = temp
                            return f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {temp}"
                        
                        model_temp.change(update_temp, inputs=[model_temp], outputs=[model_info])
                    
                    with gr.Column():
                        gr.Markdown("#### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
                        gr.Markdown(f"* **–í–µ—Ä—Å–∏—è Python**: {sys.version.split()[0]}")
                        gr.Markdown(f"* **–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤**: {config.FILES_DIR}")
                        gr.Markdown(f"* **–•–æ—Å—Ç/–ø–æ—Ä—Ç**: {config.SERVER_HOST}:{config.SERVER_PORT}")
        
        # –ü–æ–¥–≤–∞–ª
        with gr.Box(elem_classes="footer"):
            gr.Markdown("–õ–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞ | –ò—Å–ø–æ–ª—å–∑—É–µ—Ç DeepSeek-coder —á–µ—Ä–µ–∑ Ollama")
        
        # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
        def user(message, history):
            return "", history + [[message, None]]
        
        def bot_response(history):
            message = history[-1][0]
            response = bot.chat(message, history[:-1])
            history[-1][1] = response
            return history
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        submit.click(user, [msg, chatbot], [msg, chatbot], queue=False).then(
            bot_response, chatbot, chatbot
        )
        
        msg.submit(user, [msg, chatbot], [msg, chatbot], queue=False).then(
            bot_response, chatbot, chatbot
        )
        
        clear.click(lambda: None, None, chatbot, queue=False)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        def list_files_callback():
            return bot.list_files()
        
        def read_file_callback(filename):
            return bot.read_file(filename)
        
        def save_file_callback(filename, content):
            return bot.create_file(filename, content)
        
        list_btn.click(list_files_callback, outputs=[file_result])
        read_btn.click(read_file_callback, inputs=[filename_input], outputs=[file_content])
        save_btn.click(save_file_callback, inputs=[filename_input, file_content], outputs=[file_result])
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–¥–∞
        def execute_code_callback(code):
            return bot.execute_code(code)
        
        run_btn.click(execute_code_callback, inputs=[code_input], outputs=[code_output])
    
    return interface

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    interface = build_custom_interface()
    interface.launch(
        server_name=config.SERVER_HOST,
        server_port=config.SERVER_PORT,
        share=config.SHARE,
        auth=config.AUTH
    )
