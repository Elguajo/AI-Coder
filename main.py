import os
import gradio as gr
from langchain.llms import Ollama
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory
from langchain.prompts import PromptTemplate
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEMP_DIR = os.path.join(tempfile.gettempdir(), "elcoder_files")
os.makedirs(TEMP_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è Elcoder
PROMPT_TEMPLATE = """
–¢—ã - Elcoder, –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ DeepSeek-coder. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–∏—Å–∞—Ç—å –∫–æ–¥, –æ–±—ä—è—Å–Ω—è—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–µ—à–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.

–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:
{history}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {input}
Elcoder:"""

class CodingChatBot:
    def __init__(self, model_name="deepseek-coder:6.7b-instruct-q4_K_M"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Elcoder - —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞
        
        Args:
            model_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å Ollama
        """
        self.model_name = model_name
        self.llm = Ollama(model=model_name)
        self.prompt = PromptTemplate(
            input_variables=["history", "input"],
            template=PROMPT_TEMPLATE
        )
        self.memory = ConversationBufferMemory(return_messages=True)
        self.conversation = ConversationChain(
            llm=self.llm,
            prompt=self.prompt,
            memory=self.memory,
            verbose=True
        )
        self.file_history = {}
    
    def chat(self, message, history):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        
        Args:
            message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            history (list): –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            str: –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        """
        response = self.conversation.predict(input=message)
        return response
    
    def create_file(self, filename, content):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        
        Args:
            filename (str): –ò–º—è —Ñ–∞–π–ª–∞
            content (str): –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        if not filename:
            return "–û—à–∏–±–∫–∞: –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        file_path = os.path.join(TEMP_DIR, filename)
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            self.file_history[filename] = file_path
            return f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ {file_path}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
    
    def read_file(self, filename):
        """
        –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
        
        Args:
            filename (str): –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            str: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        if not filename:
            return "–û—à–∏–±–∫–∞: –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        if filename in self.file_history:
            file_path = self.file_history[filename]
        else:
            file_path = os.path.join(TEMP_DIR, filename)
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            return content
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
    
    def list_files(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        
        Returns:
            str: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        """
        files = list(self.file_history.keys())
        if not files:
            return "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
        
        return "–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n" + "\n".join(files)

def build_interface():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gradio
    
    Returns:
        gr.Blocks: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio
    """
    bot = CodingChatBot()
    
    with gr.Blocks(title="Elcoder - –ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º") as interface:
        gr.Markdown("# ü§ñ Elcoder - –õ–æ–∫–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞")
        gr.Markdown("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Elcoder –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞, —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏.")
        
        with gr.Tab("–ß–∞—Ç"):
            chatbot = gr.Chatbot(height=500)
            msg = gr.Textbox(
                placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é...",
                container=False,
                scale=8
            )
            clear = gr.Button("–û—á–∏—Å—Ç–∏—Ç—å")
            
            def user(message, history):
                return "", history + [[message, None]]
            
            def bot_response(history):
                message = history[-1][0]
                response = bot.chat(message, history[:-1])
                history[-1][1] = response
                return history
            
            msg.submit(user, [msg, chatbot], [msg, chatbot], queue=False).then(
                bot_response, chatbot, chatbot
            )
            clear.click(lambda: None, None, chatbot, queue=False)
        
        with gr.Tab("–§–∞–π–ª—ã"):
            with gr.Row():
                with gr.Column(scale=1):
                    gr.Markdown("### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏")
                    filename_input = gr.Textbox(label="–ò–º—è —Ñ–∞–π–ª–∞")
                    list_btn = gr.Button("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
                    read_btn = gr.Button("–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª")
                    file_result = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏", lines=10)
                
                with gr.Column(scale=2):
                    file_content = gr.Code(language="python", label="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞", lines=25)
                    save_btn = gr.Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª")
            
            def list_files_callback():
                return bot.list_files()
            
            def read_file_callback(filename):
                return bot.read_file(filename)
            
            def save_file_callback(filename, content):
                return bot.create_file(filename, content)
            
            list_btn.click(list_files_callback, outputs=[file_result])
            read_btn.click(read_file_callback, inputs=[filename_input], outputs=[file_content])
            save_btn.click(save_file_callback, inputs=[filename_input, file_content], outputs=[file_result])
    
    return interface

if __name__ == "__main__":
    interface = build_interface()
    interface.launch()
